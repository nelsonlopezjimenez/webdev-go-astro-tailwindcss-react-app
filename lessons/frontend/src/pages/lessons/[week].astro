---
import Layout from '../../layouts/Layout.astro';
import MarkdownRenderer from '../../components/MarkdownRenderer.jsx';

// export const prerender = false; // Server-render this page

export async function getStaticPaths() {
  // Generate paths for weeks 1-10
  return [
    {params: {week: "1"}},
    {params: {week: "2"}},
    {params: {week: "3"}},
    {params: {week: "4"}},
    {params: {week: "5"}},
    {params: {week: "6"}},
    {params: {week: "7"}},
    {params: {week: "8"}},
    {params: {week: "9"}},
    {params: {week: "10"}},
  ];
}

const { week } = Astro.params;

// Fetch lesson data
const API_BASE = 'http://localhost:8080/api';
let lesson = null;
let error = null;

try {
  const response = await fetch(`${API_BASE}/lessons/${week}`);
  if (response.ok) {
    lesson = await response.json();
  } else if (response.status === 404) {
    error = 'Lesson not found';
  } else {
    error = 'Failed to load lesson';
  }
} catch (err) {
  console.error('Failed to fetch lesson:', err);
  error = 'Failed to connect to server';
}

// Get all lessons for navigation
let allLessons = [];
try {
  const response = await fetch(`${API_BASE}/lessons`);
  if (response.ok) {
    allLessons = await response.json();
  }
} catch (err) {
  console.error('Failed to fetch all lessons:', err);
}

// Find prev/next lessons
const currentWeek = parseInt(week);
const prevLesson = allLessons.find(l => l.week === currentWeek - 1);
const nextLesson = allLessons.find(l => l.week === currentWeek + 1);
---

<Layout title={lesson ? `Week ${lesson.week}: ${lesson.title}` : `Week ${week} - Lesson`}>
  <div class="max-w-4xl mx-auto">
    {error ? (
      <div class="bg-red-50 border border-red-200 rounded-lg p-8 text-center">
        <div class="text-6xl mb-4">‚ùå</div>
        <h1 class="text-2xl font-bold text-red-800 mb-4">Lesson Not Available</h1>
        <p class="text-red-700 mb-6">{error}</p>
        <a 
          href="/lessons" 
          class="inline-block bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors"
        >
          Back to All Lessons
        </a>
      </div>
    ) : lesson ? (
      <>
        <!-- Lesson Header -->
        <div class="bg-white rounded-lg shadow-lg p-8 mb-8">
          <div class="flex items-center justify-between mb-6">
            <div class="flex items-center space-x-4">
              <div class="bg-blue-600 text-white w-12 h-12 rounded-full flex items-center justify-center font-bold text-lg">
                {lesson.week}
              </div>
              <div>
                <h1 class="text-3xl font-bold text-gray-800">{lesson.title}</h1>
                <p class="text-gray-600">Week {lesson.week} of 10</p>
              </div>
            </div>
            
            <div class="text-right">
              <p class="text-sm text-gray-500">
                Last updated: {new Date(lesson.created_at).toLocaleDateString()}
              </p>
            </div>
          </div>
          
          {lesson.description && (
            <div class="bg-blue-50 border-l-4 border-blue-500 p-4 mb-6">
              <p class="text-blue-800 font-medium">{lesson.description}</p>
            </div>
          )}
        </div>

        <!-- Lesson Content -->
        <div class="bg-white rounded-lg shadow-lg p-8 mb-8">
          <div class="markdown-content">
            <MarkdownRenderer content={lesson.content} client:load />
          </div>
        </div>

        <!-- Navigation -->
        <div class="bg-white rounded-lg shadow-lg p-6">
          <div class="flex justify-between items-center">
            <div>
              {prevLesson ? (
                <a 
                  href={`/lessons/${prevLesson.week}`}
                  class="inline-flex items-center space-x-2 text-blue-600 hover:text-blue-800 transition-colors"
                >
                  <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                  </svg>
                  <div>
                    <div class="text-sm text-gray-500">Previous</div>
                    <div class="font-medium">Week {prevLesson.week}: {prevLesson.title}</div>
                  </div>
                </a>
              ) : (
                <div class="text-gray-400">
                  <div class="text-sm">Previous</div>
                  <div>No previous lesson</div>
                </div>
              )}
            </div>
            
            <a 
              href="/lessons" 
              class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors"
            >
              All Lessons
            </a>
            
            <div class="text-right">
              {nextLesson ? (
                <a 
                  href={`/lessons/${nextLesson.week}`}
                  class="inline-flex items-center space-x-2 text-blue-600 hover:text-blue-800 transition-colors"
                >
                  <div>
                    <div class="text-sm text-gray-500">Next</div>
                    <div class="font-medium">Week {nextLesson.week}: {nextLesson.title}</div>
                  </div>
                  <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                  </svg>
                </a>
              ) : (
                <div class="text-gray-400">
                  <div class="text-sm">Next</div>
                  <div>No next lesson</div>
                </div>
              )}
            </div>
          </div>
        </div>
      </>
    ) : (
      <div class="bg-gray-50 rounded-lg p-12 text-center">
        <div class="animate-spin w-12 h-12 border-4 border-blue-500 border-t-transparent rounded-full mx-auto mb-4"></div>
        <p class="text-gray-600">Loading lesson...</p>
      </div>
    )}
  </div>
</Layout>