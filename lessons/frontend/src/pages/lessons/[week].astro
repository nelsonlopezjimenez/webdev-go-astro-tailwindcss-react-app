---
// src/pages/lessons/[week].astro - Updated with sidebar TOC
import Layout from '../../layouts/Layout.astro';
import TableOfContents from '../../components/TableOfContents.astro';
import MarkdownRenderer from '../../components/MarkdownRenderer.jsx';

export async function getStaticPaths() {
  const paths = [];
  for (let week = 1; week <= 60; week++) {
    paths.push({ params: { week: week.toString() } });
  }
  return paths;
}

const { week } = Astro.params;
// Find prev/next lessons
const currentWeek = parseInt(week);
const weekNumber = parseInt(week);


// Determine section
let sectionName = '';
if (currentWeek >= 1 && currentWeek <= 12) {
  sectionName = 'section1-html-css';
} else if (currentWeek >= 13 && currentWeek <= 24) {
  sectionName = 'section2-javascript';
} else if (currentWeek >= 25 && currentWeek <= 36) {
  sectionName = 'section3-backend';
} else if (currentWeek >= 37 && currentWeek <= 48) {
  sectionName = 'section4-react';
}



// Function to fetch TOC from your Go API
async function fetchTOCFromAPI(sectionName: string, weekNumber: number) {
  try {
    // This calls your Go server API endpoint
    const response = await fetch(`${Astro.url.origin}/api/lessons/${sectionName}/week${weekNumber}/toc`);
    
    if (response.ok) {
      const data = await response.json();
      return data.tocItems || [];
    }
  } catch (error) {
    console.log('Failed to fetch TOC from API:', error);
  }
  
  // Fallback to default TOC items
  return [
    { id: "learning-objectives", title: "Learning Objectives", level: 2 },
    { id: "day-1-introduction", title: "Day 1: Introduction", level: 2 },
    { id: "day-2-fundamentals", title: "Day 2: Fundamentals", level: 2 },
    { id: "day-3-practice", title: "Day 3: Practice", level: 2 },
    { id: "day-4-advanced", title: "Day 4: Advanced Topics", level: 2 },
    { id: "day-5-review", title: "Day 5: Review", level: 2 },
    { id: "assignments", title: "Assignments", level: 2 },
    { id: "resources", title: "Additional Resources", level: 2 }
  ];
}


// Function to fetch TOC directly from markdown file content
async function fetchTOCFromMarkdown(sectionName: string, weekNumber: number) {
  try {
    // Fetch the markdown content
    const response = await fetch(`${Astro.url.origin}/api/lessons/${sectionName}/week${weekNumber}/content`);
  
    // const response = await fetch(`http://localhost:8080/api/lessons/${sectionName}/week${weekNumber}/content`);

    
    if (response.ok) {
      console.log('response ok')
      const markdownContent = await response.json();
      return extractTOCFromMarkdown(markdownContent.content);
    }
  } catch (error) {
    console.log('Failed to fetch markdown content:', error);
  }
  
  return [];
}

// Function to extract TOC from markdown content
function extractTOCFromMarkdown(markdownContent: string) {
  const tocItems = [];
  const lines = markdownContent.split('\n');
  let inTOCSection = false;
  
  for (const line of lines) {
    // Look for explicit TOC section
    if (line.match(/^##?\s*(table of contents|contents|toc)/i)) {
      inTOCSection = true;
      continue;
    }
    
    // Stop when we hit another major section
    if (inTOCSection && line.match(/^##?\s+(?!.*\[.*\])/)) {
      break;
    }
    
    // Extract TOC links
    if (inTOCSection) {
      const linkMatch = line.match(/^\s*[-*]\s*\[([^\]]+)\]\(#([^)]+)\)/);
      if (linkMatch) {
        const [, title, id] = linkMatch;
        const level = (line.match(/^\s*/)[0].length / 2) + 2; // Estimate level from indentation
        
        tocItems.push({
          id: id,
          title: title,
          level: Math.min(level, 6) // Cap at h6
        });
      }
    }
    
    // If no explicit TOC, extract from headings
    if (!inTOCSection) {
      const headingMatch = line.match(/^(#{1,6})\s+(.+)$/);
      if (headingMatch) {
        const [, hashes, title] = headingMatch;
        const level = hashes.length;
        
        // Skip the main title (h1)
        if (level > 1) {
          const id = title.toLowerCase()
            .replace(/[^\w\s-]/g, '')
            .replace(/\s+/g, '-')
            .replace(/^-+|-+$/g, '');
          
          tocItems.push({
            id: id,
            title: title,
            level: level
          });
        }
      }
    }
  }
  
  return tocItems;
}

// Fetch TOC items (try API first, then markdown parsing)
let tocItems ;
try {
  tocItems = await fetchTOCFromAPI(sectionName, weekNumber);
  
  // If API doesn't return items, try parsing markdown
  if (!tocItems || tocItems.length === 0) {
    tocItems = await fetchTOCFromMarkdown(sectionName, weekNumber);
  }
} catch (error) {
  console.log('Error fetching TOC:', error);
  tocItems = [
    { id: "learning-objectives", title: "Learning Objectives", level: 2 },
    { id: "introduction", title: "Introduction", level: 2 },
    { id: "main-content", title: "Main Content", level: 2 },
    { id: "exercises", title: "Exercises", level: 2 },
    { id: "summary", title: "Summary", level: 2 }
  ];
}






// Fetch lesson data
const API_BASE = 'http://localhost:8080/api';
let lesson = null;
let error = null;

try {
  const response = await fetch(`${API_BASE}/lessons/${week}`);
  if (response.ok) {
    lesson = await response.json();
  } else if (response.status === 404) {
    error = 'Lesson not found';
  } else {
    error = 'Failed to load lesson';
  }
} catch (err) {
  console.error('Failed to fetch lesson:', err);
  error = 'Failed to connect to server';
}

// Get all lessons for navigation
let allLessons = [];
try {
  const response = await fetch(`${API_BASE}/lessons`);
  if (response.ok) {
    allLessons = await response.json();
  }
} catch (err) {
  console.error('Failed to fetch all lessons:', err);
}





const prevLesson = allLessons.find(l => l.week === currentWeek - 1);
const nextLesson = allLessons.find(l => l.week === currentWeek + 1);
---

<Layout title={lesson ? `Week ${lesson.week}: ${lesson.title}` : `Week ${week} - Lesson`}>
  <main class="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8">
    <div class="max-w-7xl mx-auto px-4">
      
      <!-- Breadcrumb -->
      <nav class="mb-6">
        <ol class="flex items-center space-x-2 text-sm">
          <li><a href="/" class="text-indigo-600 hover:text-indigo-800">Home</a></li>
          <li class="text-gray-400">/</li>
          <li><a href="/lessons" class="text-indigo-600 hover:text-indigo-800">Lessons</a></li>
          <li class="text-gray-400">/</li>
          <li class="text-gray-600">Week {week}</li>
        </ol>
      </nav>

      <!-- Main Content Grid -->
      <div class="grid grid-cols-1 lg:grid-cols-4 gap-8">
        
        <!-- Sidebar - Table of Contents -->
        <aside class="lg:col-span-1 order-2 lg:order-1">
          <TableOfContents 
            weekNumber={currentWeek} 
            tocItems={tocItems}
            className="lg:sticky lg:top-4"
          />
          
          <!-- Week Navigation -->
          <div class="mt-6 bg-white rounded-lg shadow-sm border border-gray-200 p-4">
            <h4 class="font-semibold text-gray-900 mb-3">Navigate Weeks</h4>
            <div class="flex flex-col space-y-2">
              {currentWeek > 1 && (
                <a 
                  href={`/lessons/${currentWeek - 1}`}
                  class="flex items-center px-3 py-2 text-sm text-gray-600 hover:text-indigo-600 hover:bg-indigo-50 rounded-md transition-colors"
                >
                  <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                  </svg>
                  Week {currentWeek - 1}
                </a>
              )}
              
              <a 
                href="/lessons"
                class="flex items-center px-3 py-2 text-sm text-gray-600 hover:text-indigo-600 hover:bg-indigo-50 rounded-md transition-colors"
              >
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 10h16M4 14h16M4 18h16"></path>
                </svg>
                All Lessons
              </a>
              
              {currentWeek < 48 && (
                <a 
                  href={`/lessons/${currentWeek + 1}`}
                  class="flex items-center px-3 py-2 text-sm text-gray-600 hover:text-indigo-600 hover:bg-indigo-50 rounded-md transition-colors"
                >
                  Week {currentWeek + 1}
                  <svg class="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                  </svg>
                </a>
              )}
            </div>
          </div>
        </aside>

        <!-- Main Content Area -->
        <div class="lg:col-span-3 order-1 lg:order-2">
          
          <!-- Lesson Header -->
          <div class="bg-white rounded-lg shadow-lg p-6 mb-8">
            <div class="flex items-center justify-between mb-4">
              <div>
                <h1 class="text-3xl font-bold text-gray-900 mb-2">
                  Week {week} Lesson
                </h1>
                <p class="text-gray-600">
                  {sectionName.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase())}
                </p>
              </div>
              
              <!-- Mobile TOC Toggle Button -->
              <button 
                id="mobile-toc-toggle"
                class="lg:hidden px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors"
              >
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 10h16M4 14h16M4 18h16"></path>
                </svg>
              </button>
            </div>
          </div>

          <!-- Lesson Content -->
          <div class="bg-white rounded-lg shadow-lg p-6">
            <!-- This is where your actual lesson content will go -->
            <!-- You can use your existing MarkdownRenderer component here -->
             <div class="bg-white rounded-lg shadow-lg p-8 mb-8">
               <div class="markdown-content">
                <MarkdownRenderer content={lesson.content} client:load />
               </div>
             </div>
            
           
          </div>
        </div>
      </div>
    </div>
  </main>
</Layout>

<script>
  // Mobile TOC toggle functionality
  document.addEventListener('DOMContentLoaded', function() {
    const toggleButton = document.getElementById('mobile-toc-toggle');
    const sidebar = document.querySelector('aside');
    
    if (toggleButton && sidebar) {
      toggleButton.addEventListener('click', function() {
        sidebar.classList.toggle('hidden');
        sidebar.classList.toggle('block');
      });
    }
  });
</script>

<style>
  /* Mobile TOC styles */
  @media (max-width: 1024px) {
    aside {
      @apply fixed top-0 left-0 z-50 w-80 h-full bg-white shadow-xl transform -translate-x-full transition-transform duration-300 p-6 overflow-y-auto;
    }
    
    aside.block {
      @apply translate-x-0;
    }
    
 
  }
</style>