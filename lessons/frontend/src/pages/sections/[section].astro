---
import Layout from '../../layouts/Layout.astro';
import SectionTabs from '../../components/SectionTabs.astro';

export const prerender = false;

export async function getStaticPaths() {
  return [
    {params: {section: "section1-html-css"}},
    {params: {section: "section2-javascript"}},
    {params: {section: "section3-backend"}},
    {params: {section: "section4-react"}},
  ];
}

const { section } = Astro.params;

// Fetch both section data and syllabus data
const API_BASE = 'http://localhost:8080/api';
let sectionData = null;
let syllabusData = null;
let error = null;
let isBackendDown = false;


try {
  console.log('Attempting to fetch from:', `${API_BASE}/sections`);


  // Fetch basic section data
  const sectionResponse = await fetch(`${API_BASE}/sections/${section}`, {
      // Add timeout to prevent hanging
      signal: AbortSignal.timeout(5000) 
  });

  if (sectionResponse.ok) {
    sectionData = await sectionResponse.json();
    console.log(`Successfully fetched sections/${section} ${sectionData.length}`)
  } else {
    console.error('API returned error status:', sectionResponse.status);
    error = `API returned ${sectionResponse.status}`;
    isBackendDown = true;
  }

  // Try to fetch syllabus data (might not exist yet)
  try {
    const syllabusResponse = await fetch(`${API_BASE}/sections/${section}/syllabus`, {
      signal: AbortSignal.timeout(5000)
    });
    if (syllabusResponse.ok) {
      syllabusData = await syllabusResponse.json();
    } else {
      error = `API returned ${syllabusResponse.status}`;
      isBackendDown = true;
    }

  } catch (syllabusError) {
    console.log('Syllabus data not available yet');
  }
} catch (err) {
  error = 'Failed to connect to server';
   console.error('Failed to fetch course data:', err);
  
  // Check if it's a connection error (backend not running)
  if (err.cause?.code === 'ECONNREFUSED' || err.name === 'TypeError') {
    isBackendDown = true;
    error = 'Backend server is not running';
  } else {
    error = 'Failed to connect to course data';
  }
}

// Enhanced section metadata with fallback data
const sectionMeta = {
  "section1-html-css": {
    icon: "üåê",
    color: "blue",
    quarter: "Fall Quarter",
    courseCode: "CIS 241 from [section].astro",
    credits: "5.0 Credits",
    description: "Learn the foundation of web development with HTML structure and CSS styling",
    fallbackSyllabus: {
      description: "Website development using current HTML languages, approached from a source code perspective. Covers tags, forms, linked objects, current CSS, frames, tables, and an introduction to scripting.",
      objectives: [
        "Perform content design and technical analysis on web applications and websites",
        "Use current HTML to develop, debug, maintain, and document web applications and websites",
        "Compare and contrast different browsers' effects on current HTML documents",
        "Use current HTML forms, iframes, and tables",
        "Create current HTML style through inline, embedded, and Cascading Style Sheets"
      ],
      topics: [
        "HTML5 semantic elements and document structure",
        "CSS fundamentals: selectors, properties, and values", 
        "CSS layout techniques: Flexbox and Grid",
        "Responsive web design and media queries",
        "Web accessibility principles and best practices",
        "Form creation and validation",
        "CSS animations and transitions",
        "Browser compatibility and testing"
      ],
      assessment: [
        "Weekly coding assignments (40%)",
        "Midterm project: Multi-page website (20%)",
        "Final project: Responsive portfolio site (25%)",
        "Lab exercises and participation (15%)"
      ],
      resources: [
        "[SECTION] - MDN Web Docs - HTML/CSS Reference <a href='http://localhost:22022'/>dddd</a>",
        "W3Schools - HTML/CSS Tutorials",
        "CSS-Tricks - CSS techniques and guides",
        "Can I Use - Browser compatibility tables"
      ]
    }
  },
  "section2-javascript": {
    icon: "‚ö°",
    color: "green",
    quarter: "Winter Quarter", 
    courseCode: "CIS 242 from [section].astro",
    credits: "5.0 Credits",
    description: "Master JavaScript programming and DOM manipulation for interactive websites",
    fallbackSyllabus: {
      description: "Students will explore embedding, inline and external scripts, functions, form validation, loops, conditional statements, strings, numbers, and DHTML.",
      objectives: [
        "Use object-oriented client-side scripting with well-formed web pages",
        "Recognize client-side variables and data types and operations",
        "Write client-side functions, event handlers, and control structures",
        "Verify form data through scripting validation",
        "Save state information through hidden fields, query-strings, and cookies"
      ],
      topics: [
        "JavaScript fundamentals: variables, data types, operators",
        "Functions and scope",
        "DOM manipulation and event handling", 
        "Control structures: loops and conditionals",
        "Arrays and objects",
        "Form validation and user input handling",
        "Asynchronous JavaScript: callbacks, promises, async/await"
      ],
      assessment: [
        "Weekly programming exercises (35%)",
        "Midterm exam: JavaScript fundamentals (20%)",
        "Interactive web app project (30%)",
        "Lab work and code reviews (15%)"
      ],
// In your [section].astro fallbackSyllabus
      resources: [
        {
          text: "SECTION2 - MDN Web Docs - HTML/CSS Reference",
          url: "https://developer.mozilla.org/en-US/docs/Web/HTML"
        },
        {
          text: "W3Schools - HTML/CSS Tutorials",
          url: "https://www.w3schools.com/html/"
        },
        {
          text: "CSS-Tricks - CSS techniques and guides",
          url: "https://css-tricks.com/"
        },
        {
          text: "Can I Use - Browser compatibility tables",
          url: "https://caniuse.com/"
        },
        {
          text: "W3C Markup Validator - Validate your HTML code",
          url: "https://validator.w3.org/"
        },
        // For resources without links, just use text
        {
          text: "Course textbook: HTML & CSS Design and Build Websites",
          url: null
        }
      ]
    }
  },
  "section3-backend": {
    icon: "üöÄ",
    color: "purple",
    quarter: "Spring Quarter",
    courseCode: "CIS 243 from [section].astro", 
    credits: "5.0 Credits",
    description: "Build server-side applications with Node.js and database integration",
    fallbackSyllabus: {
      description: "Server-side scripting fundamentals including functions, logical structure, database connectivity, Object-Oriented principles, relational databases, and web frameworks.",
      objectives: [
        "Understand difference between client-side and server-side scripting",
        "Use appropriate script types to complete interactive websites with data repositories",
        "Use Model, View, Controller (MVC) principles and architecture",
        "Create procedures and reusable code in scripting language"
      ],
      topics: [
        "Node.js runtime and npm package management",
        "Express.js framework and routing",
        "Database design and MongoDB integration", 
        "RESTful API development",
        "Authentication and authorization",
        "Middleware and error handling"
      ],
      assessment: [
        "API development assignments (40%)",
        "Database design project (20%)",
        "Full-stack application (25%)",
        "Technical documentation and testing (15%)"
      ],
      resources: [
        "[SECTION] - Node.js Documentation",
        "Express.js Official Guide",
        "MongoDB University courses"
      ]
    }
  },
  "section4-react": {
    icon: "‚öõÔ∏è",
    color: "orange",
    quarter: "Summer Quarter",
    courseCode: "CIS 244 from [section].astro",
    credits: "5.0 Credits", 
    description: "Create modern web applications with React framework and advanced concepts",
    fallbackSyllabus: {
      description: "Students learn to work with open-source JavaScript frameworks including React, AngularJS, Vue.js, and other commonly used frameworks.",
      objectives: [
        "Compare and contrast top JavaScript frameworks",
        "Develop and implement content using JavaScript frameworks",
        "Develop responsive and accessible websites using current technologies",
        "Create ongoing plan to maintain and update websites"
      ],
      topics: [
        "React fundamentals: components, JSX, props",
        "State management with hooks",
        "Component lifecycle and side effects",
        "React Router for single-page applications",
        "API integration and data fetching",
        "Testing React components"
      ],
      assessment: [
        "Component-building exercises (35%)",
        "Mid-term project: Multi-page React app (25%)",
        "Capstone project: Full-featured application (30%)",
        "Code quality and documentation (10%)"
      ],
      resources: [
        "[SESCTION] - React Official Documentation",
        "Create React App - Development environment", 
        "React Router documentation"
      ]
    }
  }
};

const meta = sectionMeta[section] || sectionMeta["section1-html-css"];

// Use API syllabus data if available, otherwise use fallback
const syllabus = syllabusData?.syllabus_info || meta.fallbackSyllabus;
const courseInfo = {
  courseCode: syllabusData?.syllabus_info?.course_code || meta.courseCode,
  credits: syllabusData?.syllabus_info?.credits || meta.credits,
  prerequisites: syllabusData?.syllabus_info?.prerequisites || "See course catalog"
};
---

<Layout title="Section Page">
  <div class="min-h-screen bg-gray-50">
    
    <!-- Backend Status Banner -->
    {isBackendDown && (
      <div class="bg-yellow-50 border-l-4 border-yellow-400 p-4">
        <div class="max-w-7xl mx-auto flex">
          <div class="flex-shrink-0">
            <svg class="h-5 w-5 text-yellow-400" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"/>
            </svg>
          </div>
          <div class="ml-3">
            <p class="text-sm text-yellow-700">
              <strong>Development Mode:</strong> Backend server is not running. Using fallback data.
              <span class="block mt-1 text-xs">
                Start your Go server with: <code class="bg-yellow-100 px-1 rounded">go run main.go</code>
              </span>
            </p>
          </div>
        </div>
      </div>
    )}

    <!-- Main content when no error -->
    <div>
      {!error && sectionData && (
        <div>
          <!-- Section Header -->
          <div class="bg-gradient-to-r from-blue-600 to-blue-700 text-white">
            <div class="max-w-7xl mx-auto px-6 py-16">
              <nav class="mb-6">
                <ol class="flex items-center space-x-2 text-sm">
                  <li><a href="/" class="text-white opacity-80 hover:opacity-100">Home</a></li>
                  <li class="text-white opacity-60">/</li>
                  <li class="text-white font-medium">{sectionData.name}</li>
                </ol>
              </nav>
              
              <div class="grid md:grid-cols-3 gap-8 items-center">
                <div class="md:col-span-2">
                  <div class="flex items-center mb-4">
                    <span class="text-5xl mr-4">{meta.icon}</span>
                    <div>
                      <div class="flex items-center gap-3 mb-2">
                        <h1 class="text-4xl md:text-5xl font-bold">{sectionData.name}</h1>
                        <span class="bg-white bg-opacity-20 backdrop-blur-sm px-3 py-1 rounded-full text-sm font-medium">
                          {courseInfo.courseCode}
                        </span>
                      </div>
                      <p class="text-xl text-white opacity-90">{meta.quarter}</p>
                    </div>
                  </div>
                  
                  <p class="text-lg text-white opacity-80 mb-6 max-w-2xl">
                    {meta.description}
                  </p>
                  
                  <div class="flex items-center gap-4 text-white opacity-90">
                    <span class="flex items-center">
                      <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20">
                        <path d="M10.394 2.08a1 1 0 00-.788 0l-7 3a1 1 0 000 1.84L5.25 8.051a.999.999 0 01.356-.257l4-1.714a1 1 0 11.788 1.838L7.667 9.088l1.94.831a1 1 0 00.787 0l7-3a1 1 0 000-1.838l-7-3z"></path>
                      </svg>
                      {courseInfo.credits}
                    </span>
                    <span class="text-sm">
                      Prerequisite: {courseInfo.prerequisites}
                    </span>
                  </div>
                </div>
                
                <div class="bg-white bg-opacity-10 backdrop-blur-sm rounded-xl p-6">
                  <h3 class="text-lg font-bold mb-4">Section Progress</h3>
                  <div class="space-y-4">
                    <div class="flex justify-between text-sm">
                      <span>Lessons Available</span>
                      <span>{sectionData.lessons.length} of 12</span>
                    </div>
                    <div class="w-full bg-white bg-opacity-20 rounded-full h-3">
                      <div 
                        class="bg-white h-3 rounded-full transition-all duration-500"
                        style={`width: ${(sectionData.lessons.length / 12) * 100}%`}
                      ></div>
                    </div>
                    
                    <div>
                      {sectionData.lessons.length > 0 && (
                        <div class="text-sm">
                          <p>Latest: Week {Math.max(...sectionData.lessons.map(l => l.week - sectionData.week_start + 1))}</p>
                          <p class="text-white opacity-80 truncate">{sectionData.lessons[sectionData.lessons.length - 1]?.title}</p>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>


          <!--  Tabs Component -->
          <SectionTabs sectionData={sectionData} meta={meta} syllabus={syllabus} courseInfo={courseInfo} syllabusData={syllabusData} />


        </div>
      )}
    </div>
  </div>
</Layout>

