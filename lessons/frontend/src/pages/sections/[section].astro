---
import Layout from '../../layouts/Layout.astro';

export const prerender = false;

export async function getStaticPaths() {
  return [
    {params: {section: "section1-html-css"}},
    {params: {section: "section2-javascript"}},
    {params: {section: "section3-backend"}},
    {params: {section: "section4-react"}},
  ];
}

const { section } = Astro.params;

// Fetch both section data and syllabus data
const API_BASE = 'http://localhost:8080/api';
let sectionData = null;
let syllabusData = null;
let error = null;

try {
  // Fetch basic section data
  const sectionResponse = await fetch(`${API_BASE}/sections/${section}`);
  if (sectionResponse.ok) {
    sectionData = await sectionResponse.json();
  } else {
    error = 'Section not found';
  }

  // Try to fetch syllabus data (might not exist yet)
  try {
    const syllabusResponse = await fetch(`${API_BASE}/sections/${section}/syllabus`);
    if (syllabusResponse.ok) {
      syllabusData = await syllabusResponse.json();
    }
  } catch (syllabusError) {
    console.log('Syllabus data not available yet');
  }
} catch (err) {
  error = 'Failed to connect to server';
}

// Enhanced section metadata with fallback data
const sectionMeta = {
  "section1-html-css": {
    icon: "üåê",
    color: "blue",
    quarter: "Fall Quarter",
    courseCode: "CIS 241",
    credits: "5.0 Credits",
    description: "Learn the foundation of web development with HTML structure and CSS styling",
    fallbackSyllabus: {
      description: "Website development using current HTML languages, approached from a source code perspective. Covers tags, forms, linked objects, current CSS, frames, tables, and an introduction to scripting.",
      objectives: [
        "Perform content design and technical analysis on web applications and websites",
        "Use current HTML to develop, debug, maintain, and document web applications and websites",
        "Compare and contrast different browsers' effects on current HTML documents",
        "Use current HTML forms, iframes, and tables",
        "Create current HTML style through inline, embedded, and Cascading Style Sheets"
      ],
      topics: [
        "HTML5 semantic elements and document structure",
        "CSS fundamentals: selectors, properties, and values", 
        "CSS layout techniques: Flexbox and Grid",
        "Responsive web design and media queries",
        "Web accessibility principles and best practices",
        "Form creation and validation",
        "CSS animations and transitions",
        "Browser compatibility and testing"
      ],
      assessment: [
        "Weekly coding assignments (40%)",
        "Midterm project: Multi-page website (20%)",
        "Final project: Responsive portfolio site (25%)",
        "Lab exercises and participation (15%)"
      ],
      resources: [
        "MDN Web Docs - HTML/CSS Reference",
        "W3Schools - HTML/CSS Tutorials",
        "CSS-Tricks - CSS techniques and guides",
        "Can I Use - Browser compatibility tables"
      ]
    }
  },
  "section2-javascript": {
    icon: "‚ö°",
    color: "green",
    quarter: "Winter Quarter", 
    courseCode: "CIS 242",
    credits: "5.0 Credits",
    description: "Master JavaScript programming and DOM manipulation for interactive websites",
    fallbackSyllabus: {
      description: "Students will explore embedding, inline and external scripts, functions, form validation, loops, conditional statements, strings, numbers, and DHTML.",
      objectives: [
        "Use object-oriented client-side scripting with well-formed web pages",
        "Recognize client-side variables and data types and operations",
        "Write client-side functions, event handlers, and control structures",
        "Verify form data through scripting validation",
        "Save state information through hidden fields, query-strings, and cookies"
      ],
      topics: [
        "JavaScript fundamentals: variables, data types, operators",
        "Functions and scope",
        "DOM manipulation and event handling", 
        "Control structures: loops and conditionals",
        "Arrays and objects",
        "Form validation and user input handling",
        "Asynchronous JavaScript: callbacks, promises, async/await"
      ],
      assessment: [
        "Weekly programming exercises (35%)",
        "Midterm exam: JavaScript fundamentals (20%)",
        "Interactive web app project (30%)",
        "Lab work and code reviews (15%)"
      ],
      resources: [
        "MDN Web Docs - JavaScript Reference",
        "JavaScript.info - Modern JavaScript tutorial",
        "W3Schools - JavaScript tutorials and examples"
      ]
    }
  },
  "section3-backend": {
    icon: "üöÄ",
    color: "purple",
    quarter: "Spring Quarter",
    courseCode: "CIS 243", 
    credits: "5.0 Credits",
    description: "Build server-side applications with Node.js and database integration",
    fallbackSyllabus: {
      description: "Server-side scripting fundamentals including functions, logical structure, database connectivity, Object-Oriented principles, relational databases, and web frameworks.",
      objectives: [
        "Understand difference between client-side and server-side scripting",
        "Use appropriate script types to complete interactive websites with data repositories",
        "Use Model, View, Controller (MVC) principles and architecture",
        "Create procedures and reusable code in scripting language"
      ],
      topics: [
        "Node.js runtime and npm package management",
        "Express.js framework and routing",
        "Database design and MongoDB integration", 
        "RESTful API development",
        "Authentication and authorization",
        "Middleware and error handling"
      ],
      assessment: [
        "API development assignments (40%)",
        "Database design project (20%)",
        "Full-stack application (25%)",
        "Technical documentation and testing (15%)"
      ],
      resources: [
        "Node.js Documentation",
        "Express.js Official Guide",
        "MongoDB University courses"
      ]
    }
  },
  "section4-react": {
    icon: "‚öõÔ∏è",
    color: "orange",
    quarter: "Summer Quarter",
    courseCode: "CIS 244",
    credits: "5.0 Credits", 
    description: "Create modern web applications with React framework and advanced concepts",
    fallbackSyllabus: {
      description: "Students learn to work with open-source JavaScript frameworks including React, AngularJS, Vue.js, and other commonly used frameworks.",
      objectives: [
        "Compare and contrast top JavaScript frameworks",
        "Develop and implement content using JavaScript frameworks",
        "Develop responsive and accessible websites using current technologies",
        "Create ongoing plan to maintain and update websites"
      ],
      topics: [
        "React fundamentals: components, JSX, props",
        "State management with hooks",
        "Component lifecycle and side effects",
        "React Router for single-page applications",
        "API integration and data fetching",
        "Testing React components"
      ],
      assessment: [
        "Component-building exercises (35%)",
        "Mid-term project: Multi-page React app (25%)",
        "Capstone project: Full-featured application (30%)",
        "Code quality and documentation (10%)"
      ],
      resources: [
        "React Official Documentation",
        "Create React App - Development environment", 
        "React Router documentation"
      ]
    }
  }
};

const meta = sectionMeta[section] || sectionMeta["section1-html-css"];

// Use API syllabus data if available, otherwise use fallback
const syllabus = syllabusData?.syllabus_info || meta.fallbackSyllabus;
const courseInfo = {
  courseCode: syllabusData?.syllabus_info?.course_code || meta.courseCode,
  credits: syllabusData?.syllabus_info?.credits || meta.credits,
  prerequisites: syllabusData?.syllabus_info?.prerequisites || "See course catalog"
};
---

<Layout title="Section Page">
  <div class="min-h-screen bg-gray-50">
    
    <!-- Error handling -->
    <div>
      {error && (
        <div class="max-w-4xl mx-auto px-6 py-16">
          <div class="bg-red-50 border border-red-200 rounded-xl p-12 text-center">
            <h1 class="text-3xl font-bold text-red-800 mb-4">Section Not Available</h1>
            <p class="text-red-700 mb-8">{error}</p>
            <a href="/" class="inline-block bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700">
              Back to Home
            </a>
          </div>
        </div>
      )}
    </div>

    <!-- Main content when no error -->
    <div>
      {!error && sectionData && (
        <div>
          <!-- Section Header -->
          <div class="bg-gradient-to-r from-blue-600 to-blue-700 text-white">
            <div class="max-w-7xl mx-auto px-6 py-16">
              <nav class="mb-6">
                <ol class="flex items-center space-x-2 text-sm">
                  <li><a href="/" class="text-white opacity-80 hover:opacity-100">Home</a></li>
                  <li class="text-white opacity-60">/</li>
                  <li class="text-white font-medium">{sectionData.name}</li>
                </ol>
              </nav>
              
              <div class="grid md:grid-cols-3 gap-8 items-center">
                <div class="md:col-span-2">
                  <div class="flex items-center mb-4">
                    <span class="text-5xl mr-4">{meta.icon}</span>
                    <div>
                      <div class="flex items-center gap-3 mb-2">
                        <h1 class="text-4xl md:text-5xl font-bold">{sectionData.name}</h1>
                        <span class="bg-white bg-opacity-20 backdrop-blur-sm px-3 py-1 rounded-full text-sm font-medium">
                          {courseInfo.courseCode}
                        </span>
                      </div>
                      <p class="text-xl text-white opacity-90">{meta.quarter}</p>
                    </div>
                  </div>
                  
                  <p class="text-lg text-white opacity-80 mb-6 max-w-2xl">
                    {meta.description}
                  </p>
                  
                  <div class="flex items-center gap-4 text-white opacity-90">
                    <span class="flex items-center">
                      <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20">
                        <path d="M10.394 2.08a1 1 0 00-.788 0l-7 3a1 1 0 000 1.84L5.25 8.051a.999.999 0 01.356-.257l4-1.714a1 1 0 11.788 1.838L7.667 9.088l1.94.831a1 1 0 00.787 0l7-3a1 1 0 000-1.838l-7-3z"></path>
                      </svg>
                      {courseInfo.credits}
                    </span>
                    <span class="text-sm">
                      Prerequisite: {courseInfo.prerequisites}
                    </span>
                  </div>
                </div>
                
                <div class="bg-white bg-opacity-10 backdrop-blur-sm rounded-xl p-6">
                  <h3 class="text-lg font-bold mb-4">Section Progress</h3>
                  <div class="space-y-4">
                    <div class="flex justify-between text-sm">
                      <span>Lessons Available</span>
                      <span>{sectionData.lessons.length} of 12</span>
                    </div>
                    <div class="w-full bg-white bg-opacity-20 rounded-full h-3">
                      <div 
                        class="bg-white h-3 rounded-full transition-all duration-500"
                        style={`width: ${(sectionData.lessons.length / 12) * 100}%`}
                      ></div>
                    </div>
                    
                    <div>
                      {sectionData.lessons.length > 0 && (
                        <div class="text-sm">
                          <p>Latest: Week {Math.max(...sectionData.lessons.map(l => l.week - sectionData.week_start + 1))}</p>
                          <p class="text-white opacity-80 truncate">{sectionData.lessons[sectionData.lessons.length - 1]?.title}</p>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Tab Navigation -->
          <div class="bg-white shadow-sm sticky top-0 z-10">
            <div class="max-w-7xl mx-auto px-6">
              <nav class="flex space-x-8">
                <button 
                  class="tab-btn py-4 px-2 border-b-2 border-blue-500 text-blue-600 font-medium text-sm"
                  data-tab="lessons"
                >
                  Lessons ({sectionData.lessons.length})
                </button>
                <button 
                  class="tab-btn py-4 px-2 border-b-2 border-transparent text-gray-500 font-medium text-sm"
                  data-tab="syllabus"
                >
                  Syllabus
                </button>
                <button 
                  class="tab-btn py-4 px-2 border-b-2 border-transparent text-gray-500 font-medium text-sm"
                  data-tab="schedule"
                >
                  Weekly Schedule
                </button>
              </nav>
            </div>
          </div>

          <!-- Tab Content -->
          <div class="max-w-7xl mx-auto px-6 py-8">
            
            <!-- Lessons Tab -->
            <div id="lessons-tab" class="tab-content">
              <div>
                {sectionData.lessons.length > 0 && (
                  <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
                    {sectionData.lessons.map((lesson) => {
                      const weekInSection = lesson.week - sectionData.week_start + 1;
                      return (
                        <div class="bg-white rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 border border-gray-200 overflow-hidden">
                          <div class="bg-gradient-to-r from-blue-500 to-blue-600 text-white p-4">
                            <div class="flex items-center justify-between">
                              <span class="bg-white bg-opacity-20 backdrop-blur-sm px-3 py-1 rounded-full text-sm font-medium">
                                Week {weekInSection}
                              </span>
                              <span class="text-2xl">{meta.icon}</span>
                            </div>
                          </div>
                          
                          <div class="p-6">
                            <h3 class="text-xl font-bold text-gray-800 mb-3">
                              {lesson.title}
                            </h3>
                            
                            <div>
                              {lesson.description && (
                                <p class="text-gray-600 mb-4">
                                  {lesson.description}
                                </p>
                              )}
                            </div>
                            
                            <div class="flex items-center justify-between text-sm text-gray-500 mb-4">
                              <span>Global Week {lesson.week}</span>
                              <span>{new Date(lesson.created_at).toLocaleDateString()}</span>
                            </div>
                            
                            <a 
                              href={`/lessons/${lesson.week}`}
                              class="block w-full text-center bg-blue-600 text-white px-4 py-3 rounded-lg hover:bg-blue-700 transition-colors font-medium"
                            >
                              Start Lesson
                            </a>
                          </div>
                        </div>
                      );
                    })}
                  </div>
                )}

                {sectionData.lessons.length === 0 && (
                  <div class="text-center py-16">
                    <div class="text-8xl mb-6">üìö</div>
                    <h2 class="text-3xl font-bold text-gray-800 mb-4">Lessons Coming Soon</h2>
                    <p class="text-xl text-gray-600 max-w-2xl mx-auto">
                      This section is being prepared with amazing content. Check back soon for new lessons!
                    </p>
                  </div>
                )}
              </div>
            </div>

            <!-- Enhanced Syllabus Tab -->
            <div id="syllabus-tab" class="tab-content hidden">
              <div class="grid lg:grid-cols-3 gap-8">
                <!-- Course Overview -->
                <div class="lg:col-span-2 space-y-8">
                  
                  <!-- Course Description -->
                  <div class="bg-white rounded-xl shadow-lg p-8">
                    <h2 class="text-2xl font-bold text-gray-800 mb-4">Course Description</h2>
                    <p class="text-gray-700 leading-relaxed">
                      {syllabus.description}
                    </p>
                  </div>

                  <!-- Learning Objectives -->
                  <div class="bg-white rounded-xl shadow-lg p-8">
                    <h2 class="text-2xl font-bold text-gray-800 mb-6">Learning Objectives</h2>
                    <p class="text-gray-600 mb-4">Upon successful completion of this course, students will be able to:</p>
                    <ul class="space-y-3">
                      {syllabus.objectives && syllabus.objectives.map((objective, index) => (
                        <li class="flex items-start">
                          <span class="bg-blue-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold mr-3 mt-0.5 flex-shrink-0">
                            {index + 1}
                          </span>
                          <span class="text-gray-700">{objective}</span>
                        </li>
                      ))}
                    </ul>
                  </div>

                  <!-- Course Topics -->
                  <div class="bg-white rounded-xl shadow-lg p-8">
                    <h2 class="text-2xl font-bold text-gray-800 mb-6">Course Topics</h2>
                    <div class="grid md:grid-cols-2 gap-4">
                      {syllabus.topics && syllabus.topics.map((topic) => (
                        <div class="flex items-center p-3 bg-gray-50 rounded-lg">
                          <div class="w-2 h-2 bg-blue-500 rounded-full mr-3 flex-shrink-0"></div>
                          <span class="text-gray-700 text-sm">{topic}</span>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>

                <!-- Sidebar Information -->
                <div class="space-y-6">
                  
                  <!-- Course Details -->
                  <div class="bg-white rounded-xl shadow-lg p-6">
                    <h3 class="text-lg font-bold text-gray-800 mb-4">Course Details</h3>
                    <div class="space-y-3">
                      <div class="flex justify-between">
                        <span class="text-gray-600">Course Code</span>
                        <span class="font-semibold">{courseInfo.courseCode}</span>
                      </div>
                      <div class="flex justify-between">
                        <span class="text-gray-600">Credits</span>
                        <span class="font-semibold">{courseInfo.credits}</span>
                      </div>
                      <div class="flex justify-between">
                        <span class="text-gray-600">Quarter</span>
                        <span class="font-semibold">{meta.quarter}</span>
                      </div>
                      <div class="pt-3 border-t border-gray-200">
                        <span class="text-gray-600 text-sm">Prerequisites</span>
                        <p class="text-sm text-gray-800 mt-1">{courseInfo.prerequisites}</p>
                      </div>
                    </div>
                  </div>

                  <!-- Assessment -->
                  <div class="bg-white rounded-xl shadow-lg p-6">
                    <h3 class="text-lg font-bold text-gray-800 mb-4">Assessment</h3>
                    <div class="space-y-3">
                      {syllabus.assessment && syllabus.assessment.map((item) => (
                        <div class="text-sm text-gray-700">{item}</div>
                      ))}
                    </div>
                  </div>

                  <!-- Resources -->
                  <div class="bg-white rounded-xl shadow-lg p-6">
                    <h3 class="text-lg font-bold text-gray-800 mb-4">Resources</h3>
                    <div class="space-y-2">
                      {syllabus.resources && syllabus.resources.map((resource) => (
                        <div class="flex items-start text-sm">
                          <div class="w-2 h-2 bg-blue-500 rounded-full mr-2 mt-2 flex-shrink-0"></div>
                          <span class="text-gray-700">{resource}</span>
                        </div>
                      ))}
                    </div>
                  </div>

                  <!-- Data Source Indicator -->
                  <div class="bg-blue-50 border border-blue-200 rounded-lg p-4">
                    <div class="flex items-center">
                      <svg class="w-4 h-4 text-blue-600 mr-2" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path>
                      </svg>
                      <span class="text-xs text-blue-700">
                        {syllabusData ? 'Live course data' : 'Sample course data'}
                      </span>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <!-- Schedule Tab -->
            <div id="schedule-tab" class="tab-content hidden">
              <div class="bg-white rounded-xl shadow-lg p-8">
                <h2 class="text-2xl font-bold text-gray-800 mb-6">Weekly Schedule</h2>
                
                <div class="space-y-4">
                  {Array.from({length: 12}, (_, i) => {
                    const weekNumber = i + 1;
                    const globalWeek = sectionData.week_start + i;
                    const lesson = sectionData.lessons.find(l => l.week === globalWeek);
                    const isAvailable = lesson !== undefined;
                    
                    return (
                      <div class="border rounded-lg p-6 border-gray-200 bg-gray-50">
                        <div class="flex items-center justify-between">
                          <div class="flex-1">
                            <div class="flex items-center gap-4 mb-2">
                              <span class="font-bold text-lg text-gray-500">
                                Week {weekNumber}
                              </span>
                              <span class="text-sm text-gray-500">
                                (Global Week {globalWeek})
                              </span>
                              <div>
                                {isAvailable && (
                                  <span class="bg-blue-500 text-white px-2 py-1 rounded-full text-xs font-medium">
                                    Available
                                  </span>
                                )}
                              </div>
                            </div>
                            
                            <h3 class="text-lg font-semibold text-gray-500">
                              {lesson ? lesson.title : `Week ${weekNumber} - Coming Soon`}
                            </h3>
                            
                            <div>
                              {lesson && lesson.description && (
                                <p class="text-gray-600 mt-2">{lesson.description}</p>
                              )}
                            </div>
                            
                            <div>
                              {lesson && lesson.created_at && (
                                <p class="text-sm text-gray-500 mt-2">
                                  Published: {new Date(lesson.created_at).toLocaleDateString()}
                                </p>
                              )}
                            </div>
                          </div>
                          
                          <div class="ml-6">
                            <div>
                              {isAvailable && (
                                <a 
                                  href={`/lessons/${globalWeek}`}
                                  class="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors font-medium"
                                >
                                  View Lesson
                                </a>
                              )}
                              {!isAvailable && (
                                <div class="bg-gray-300 text-gray-500 px-6 py-2 rounded-lg cursor-not-allowed font-medium">
                                  Not Available
                                </div>
                              )}
                            </div>
                          </div>
                        </div>
                      </div>
                    );
                  })}
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  </div>
</Layout>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const tabButtons = document.querySelectorAll('.tab-btn');
  const tabContents = document.querySelectorAll('.tab-content');
  
  function switchTab(targetTab) {
    tabButtons.forEach(function(button) {
      button.classList.remove('border-blue-500', 'text-blue-600');
      button.classList.add('border-transparent', 'text-gray-500');
    });
    
    tabContents.forEach(function(content) {
      content.classList.add('hidden');
    });
    
    const targetContent = document.getElementById(targetTab + '-tab');
    if (targetContent) {
      targetContent.classList.remove('hidden');
    }
    
    const targetButton = document.querySelector('[data-tab="' + targetTab + '"]');
    if (targetButton) {
      targetButton.classList.add('border-blue-500', 'text-blue-600');
      targetButton.classList.remove('border-transparent', 'text-gray-500');
    }
  }
  
  tabButtons.forEach(function(button) {
    button.addEventListener('click', function() {
      const tabName = this.getAttribute('data-tab');
      switchTab(tabName);
    });
  });
  
  switchTab('lessons');
});
</script>
</Layout>