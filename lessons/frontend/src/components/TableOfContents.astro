---
// src/components/TableOfContents.astro
export interface Props {
  weekNumber: number;
  tocItems?: TocItem[];
  className?: string;
}

interface TocItem {
  id: string;
  title: string;
  level: number; // 1 = h1, 2 = h2, etc.
  children?: TocItem[];
}

const { weekNumber, tocItems = [], className = "" } = Astro.props;

// Default table of contents structure for week lessons
const defaultTocItems: TocItem[] = [
  { id: "learning-objectives", title: "Learning Objectives", level: 2 },
  { id: "day-31", title: "Day 1: Introduction", level: 2 },
  { id: "day-32", title: "Day 2: Core Concepts", level: 2 },
  { id: "day-33", title: "Day 3: Practical Examples", level: 2 },
  { id: "day-34", title: "Day 4: Hands-on Practice", level: 2 },
  { id: "day-35", title: "Day 5: Review & Assessment", level: 2 },
  { id: "resources", title: "Resources", level: 2 },
  { id: "assignments", title: "Assignments", level: 2 },
  { id: "next-week", title: "Next Week Preview", level: 2 }
];

// Use provided tocItems or fall back to default
const finalTocItems = tocItems.length > 0 ? tocItems : defaultTocItems;
---

<nav class={`table-of-contents ${className}`}>
  <!-- Header -->
  <div class="toc-header">
    <h3 class="text-lg font-semibold text-gray-900 mb-4 flex items-center">
      <svg class="w-5 h-5 mr-2 text-indigo-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 10h16M4 14h16M4 18h16"></path>
      </svg>
      Week {weekNumber} Contents
    </h3>
  </div>

  <!-- Table of Contents List -->
  <div class="toc-content">
    <ul class="space-y-1">
      {finalTocItems.map((item) => (
        <li class={`toc-item level-${item.level}`}>
          <a 
            href={`#${item.id}`}
            class={`
              block px-3 py-2 text-sm rounded-md transition-colors duration-200
              hover:bg-indigo-50 hover:text-indigo-700
              ${item.level === 1 ? 'font-semibold text-gray-900' : ''}
              ${item.level === 2 ? 'font-medium text-gray-700 ml-2' : ''}
              ${item.level === 3 ? 'text-gray-600 ml-4' : ''}
              ${item.level === 4 ? 'text-gray-500 ml-6' : ''}
            `}
            data-toc-link={item.id}
          >
            {item.title}
          </a>
          
          {/* Render children if they exist */}
          {item.children && item.children.length > 0 && (
            <ul class="ml-4 mt-1 space-y-1">
              {item.children.map((child) => (
                <li>
                  <a 
                    href={`#${child.id}`}
                    class="block px-3 py-1 text-xs text-gray-600 rounded-md hover:bg-indigo-50 hover:text-indigo-700 transition-colors duration-200"
                    data-toc-link={child.id}
                  >
                    {child.title}
                  </a>
                </li>
              ))}
            </ul>
          )}
        </li>
      ))}
    </ul>
  </div>

  <!-- Progress Indicator (Optional) -->
  <div class="toc-progress mt-6 pt-4 border-t border-gray-200">
    <div class="flex items-center justify-between text-xs text-gray-500 mb-2">
      <span>Reading Progress</span>
      <span id="progress-percentage">0%</span>
    </div>
    <div class="w-full bg-gray-200 rounded-full h-2">
      <div 
        id="progress-bar" 
        class="bg-indigo-600 h-2 rounded-full transition-all duration-300"
        style="width: 0%"
      ></div>
    </div>
  </div>
</nav>

<style>
  .table-of-contents {
    @apply bg-white rounded-lg shadow-sm border border-gray-200 p-4 sticky top-4 max-h-96 overflow-y-auto;
  }

  .toc-item {
    @apply relative;
  }

  .toc-item.active > a {
    @apply bg-indigo-100 text-indigo-700 font-medium;
  }

  /* Custom scrollbar for the TOC */
  .table-of-contents::-webkit-scrollbar {
    width: 4px;
  }

  .table-of-contents::-webkit-scrollbar-track {
    @apply bg-gray-100 rounded;
  }

  .table-of-contents::-webkit-scrollbar-thumb {
    @apply bg-indigo-300 rounded;
  }

  .table-of-contents::-webkit-scrollbar-thumb:hover {
    @apply bg-indigo-400;
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .table-of-contents {
      @apply relative max-h-none overflow-visible mb-6;
    }
  }
</style>

<script>
  // Add interactivity to the table of contents
  document.addEventListener('DOMContentLoaded', function() {
    const tocLinks = document.querySelectorAll('[data-toc-link]');
    const progressBar = document.getElementById('progress-bar');
    const progressPercentage = document.getElementById('progress-percentage');
    
    // Handle smooth scrolling and active states
    tocLinks.forEach(link => {
      link.addEventListener('click', function(e) {
        e.preventDefault();
        const targetId = this.getAttribute('data-toc-link');
        const targetElement = document.getElementById(targetId);
        
        if (targetElement) {
          // Smooth scroll to target
          targetElement.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
          });
          
          // Update active state
          updateActiveLink(targetId);
          
          // Update URL hash
          history.pushState(null, null, '#' + targetId);
        }
      });
    });
    
    // Track scroll position and update active link
    let ticking = false;
    
    function updateScrollProgress() {
      if (!ticking) {
        requestAnimationFrame(() => {
          const scrollTop = window.pageYOffset;
          const docHeight = document.documentElement.scrollHeight - window.innerHeight;
          const scrollPercent = Math.min(Math.max((scrollTop / docHeight) * 100, 0), 100);
          
          if (progressBar) {
            progressBar.style.width = scrollPercent + '%';
          }
          
          if (progressPercentage) {
            progressPercentage.textContent = Math.round(scrollPercent) + '%';
          }
          
          // Update active TOC item based on viewport
          updateActiveOnScroll();
          
          ticking = false;
        });
        
        ticking = true;
      }
    }
    
    function updateActiveOnScroll() {
      const headings = document.querySelectorAll('h1, h2, h3, h4, h5, h6');
      let activeId = '';
      
      headings.forEach(heading => {
        const rect = heading.getBoundingClientRect();
        if (rect.top <= 100 && rect.top >= -100) {
          activeId = heading.id;
        }
      });
      
      if (activeId) {
        updateActiveLink(activeId);
      }
    }
    
    function updateActiveLink(activeId) {
      // Remove active class from all items
      document.querySelectorAll('.toc-item').forEach(item => {
        item.classList.remove('active');
      });
      
      // Add active class to current item
      const activeLink = document.querySelector(`[data-toc-link="${activeId}"]`);
      if (activeLink) {
        activeLink.closest('.toc-item').classList.add('active');
      }
    }
    
    // Listen for scroll events
    window.addEventListener('scroll', updateScrollProgress, { passive: true });
    
    // Handle direct hash navigation
    if (window.location.hash) {
      setTimeout(() => {
        const targetId = window.location.hash.substring(1);
        updateActiveLink(targetId);
      }, 100);
    }
  });
</script>